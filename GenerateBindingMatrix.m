function [Statistics] = GenerateBindingMatrix(Sampled_Variance,...
    Sampled_Variance_Lower_Bound,Sampled_Variance_Upper_Bound,...
    Sampled_Average_Intensity,Sampled_Number_Of_Molecules) 
% properties of PitsChannel
%UNTITLED Summary of this function goes here
%   Detailed explanation goes here
%%  Filter Variance per number of molecules
% set max number of actives fluophore in a pit
Max_Number=3;
% generate nested structures (statistics VS number)
try
Statistics=struct;
for Number=1:Max_Number;
Stats=GenerateStatistics;
name=sprintf('With_%d_Active_Fluophores',Number);
Statistics.(name)=Stats;
end
catch
    Statistics=[];
end
%% Define Unbound Variance Level With Confidence Levels
% BindingDetector
%%  Detecting the number of active fluophores
    function Index=FindIndex(Samples)
        if iscell(Samples)
            Samples=cell2mat(Samples);
        end
        Index=Samples==Number;
    end
%%  Taking only corresponding signals
    function Samples=Sampling(Samples,Index)
        Samples=Samples(Index);
        Samples=Samples(:);
        if iscell(Samples)
            Samples=cell2mat(Samples);
        end
    end
%%  Getting statistics
    function Statistics=GenerateStatistics
        Indexing=cellfun(@FindIndex,Sampled_Number_Of_Molecules,...
            'UniformOutput',false);
        
        Sampled_Variance_Number=cellfun(@(x,y)Sampling(x,y),Sampled_Variance,...
        Indexing,'UniformOutput',false);
        Sampled_Variance_Number=cell2mat(Sampled_Variance_Number(:));
       
        Sampled_Variance_Lower_Bound_Number=cellfun(@(x,y)Sampling(x,y),...
            Sampled_Variance_Lower_Bound,Indexing,'UniformOutput',false);   
        Sampled_Variance_Lower_Bound_Number=...
            cell2mat(Sampled_Variance_Lower_Bound_Number(:));
        
        Sampled_Variance_Upper_Bound_Number=cellfun(@(x,y)Sampling(x,y),...
            Sampled_Variance_Upper_Bound,Indexing,'UniformOutput',false);
        Sampled_Variance_Upper_Bound_Number=...
            cell2mat(Sampled_Variance_Upper_Bound_Number(:));        
        
        Sampled_Average_Intensity_Number=cellfun(@(x,y)Sampling(x,y),...
            Sampled_Average_Intensity,Indexing,'UniformOutput',false); 
        Sampled_Average_Intensity_Number=...
            cell2mat(Sampled_Average_Intensity_Number(:));
        
        SV=[mean(Sampled_Variance_Number),std(Sampled_Variance_Number)];
        SVLB=[mean(Sampled_Variance_Lower_Bound_Number),...
            std(Sampled_Variance_Lower_Bound_Number),...
            min(Sampled_Variance_Lower_Bound_Number)];
        SVUB=[mean(Sampled_Variance_Upper_Bound_Number),...
            std(Sampled_Variance_Upper_Bound_Number),...
            max(Sampled_Variance_Upper_Bound_Number)];
        SA=[mean(Sampled_Average_Intensity_Number),...
            std(Sampled_Average_Intensity_Number)];
        
        Statistics=struct('Variance_Average',SV(1),...
            'Variance_Fluctuation',SV(2),...
            'Variance_Lower_Bound_Average',SVLB(1),...
            'Variance_Lower_Bound_Fluctuation',SVLB(2),...
            'Variance_Lower_Bound_Min',SVLB(3),...
            'Variance_Upper_Bound_Average',SVUB(1),...
            'Variance_Upper_Bound_Fluctuation',SVUB(2),...
            'Variance_Upper_Bound_Max',SVUB(3),...
            'Average_Intensity',SA(1),...
            'Average_Fluctuation',SA(2),...
            'Variance',Sampled_Variance_Number,...
            'Variance_Lower_Bound',Sampled_Variance_Lower_Bound_Number,...
            'Variance_Upper_Bound',Sampled_Variance_Upper_Bound_Number,...
            'Average',Sampled_Variance_Number,...
            'Index',{Indexing});
    end
%%  
    function BindingDetector()
        Fields=fieldnames(Statistics);
        NumberOfFields=numel(Fields);
        for i=1:NumberOfFields
            Level=...
                Statistics.(Fields{i}).('Variance_Upper_Bound_Average')+...
                3*Statistics.(Fields{i}).('Variance_Upper_Bound_Fluctuation');
            Index=Statistics.(Fields{i}).('Index');
            % process upper bounds 
            Processed_SVUP=cellfun(@(x,y)Sampling(x,y),...
                Sampled_Variance_Upper_Bound, Index);
        end
    end
end

